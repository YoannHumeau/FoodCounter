{
	"info": {
		"_postman_id": "5700c20d-8d9e-4d33-b76d-769c776eb668",
		"name": "FoodCounter",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Bad",
					"item": [
						{
							"name": "LoginAdminBadPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"errors\": {\r",
											"        \"message\": \"Username or password is incorrect\"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"benjamin\",\r\n    \"password\": \"trollpassord\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/users/authenticate",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "LoginUserBadPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"errors\": {\r",
											"        \"message\": \"Username or password is incorrect\"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"benjamin\",\r\n    \"password\": \"trollpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/users/authenticate",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "LoginUserBadNoPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var expectedError =\r",
											"{\r",
											"    \"Password\": [\r",
											"            \"The Password field is required.\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(JSON.stringify(responseJson.errors)).is.to.equal(JSON.stringify(expectedError)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"benjamin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/users/authenticate",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "LoginUserBadNoUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var expectedError =\r",
											"{\r",
											"    \"Username\": [\r",
											"            \"The Username field is required.\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(JSON.stringify(responseJson.errors)).is.to.equal(JSON.stringify(expectedError)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/users/authenticate",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users",
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LoginAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Verify user logged\", function () { \r",
									"    pm.expect(jsonData.id == 3 );\r",
									"    pm.expect(jsonData.username == \"wayne\");\r",
									"    pm.expect(jsonData.role == \"Admin\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"AdminToken\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"wayne\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/users/authenticate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoginUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Verify user logged\", function () { \r",
									"    pm.expect(jsonData.id == 3 );\r",
									"    pm.expect(jsonData.username == \"benjamin\");\r",
									"    pm.expect(jsonData.role == \"User\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"UserToken\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"benjamin\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/users/authenticate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								"authenticate"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "UserGetMe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"id\": 3,\r",
											"    \"username\": \"benjamin\",\r",
											"    \"email\": \"benjamin@noahs.arcade\",\r",
											"    \"role\": \"User\"\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/users/me",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserGetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"id\": 2,\r",
											"    \"username\": \"garth\"\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/users/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"id\": 5,\r",
											"    \"username\": \"noah\",\r",
											"    \"email\": \"noah@noah.arcade\",\r",
											"    \"role\": \"User\"\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"noah\",\r\n    \"email\": \"noah@noah.arcade\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "AdminGetMe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"id\": 1,\r",
											"    \"username\": \"wayne\",\r",
											"    \"email\": \"wayne@party.time\",\r",
											"    \"role\": \"Admin\"\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/users/me",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "AdminGetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"id\": 2,\r",
											"    \"username\": \"garth\",\r",
											"    \"email\": \"garth.algar@party.time\",\r",
											"    \"role\": \"Admin\"\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/users/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users",
										"2"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AdminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Bad",
					"item": [
						{
							"name": "UserGetByIdBadNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"errors\": {\r",
											"        \"message\": \"User not found\"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/users/777",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users",
										"777"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateUserBadUsernameAlreadyExists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"errors\": {\r",
											"        \"message\": \"The username already exists\"\r",
											"    }\r",
											"}\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"benjamin\",\r\n    \"email\": \"trollmail@mail.tld\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateUserBadEmailAlreadyExists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"errors\": {\r",
											"        \"message\": \"The email already exists\"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"trollname\",\r\n    \"email\": \"benjamin@noahs.arcade\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateUserBadMissingUsername",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var expectedError =\r",
											"{\r",
											"    \"Username\": [\r",
											"        \"The Username field is required.\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(JSON.stringify(responseJson.errors)).is.to.equal(JSON.stringify(expectedError)); \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"email\": \"troll@email.tld\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateUserBadMissingEmail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var expectedError =\r",
											"{\r",
											"    \"Email\": [\r",
											"        \"The Email field is required.\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(JSON.stringify(responseJson.errors)).is.to.equal(JSON.stringify(expectedError)); \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"TrollUsername\",\r\n    \"email\": \"\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateUserBadMissingPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var expectedError =\r",
											"{\r",
											"    \"Password\": [\r",
											"        \"The Password field is required.\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(JSON.stringify(responseJson.errors)).is.to.equal(JSON.stringify(expectedError)); \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"TrollUsername\",\r\n    \"email\": \"troll@email.tld\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "AlimentConsumes",
			"item": [
				{
					"name": "Ok",
					"item": [
						{
							"name": "AlimentConsumeGetOneOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"id\": 2,\r",
											"    \"aliment\": {\r",
											"        \"id\": 1,\r",
											"        \"name\": \"Aliment 1\",\r",
											"        \"barecode\": null,\r",
											"        \"calories\": 100\r",
											"    },\r",
											"    \"consumeDate\": \"2021-05-08T13:37:00\",\r",
											"    \"weight\": 200\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeGetAllForUserOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"[\r",
											"    {\r",
											"        \"id\": 1,\r",
											"        \"aliment\": {\r",
											"            \"id\": 1,\r",
											"            \"name\": \"Aliment 1\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 100\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T13:37:00\",\r",
											"        \"weight\": 100\r",
											"    },\r",
											"    {\r",
											"        \"id\": 2,\r",
											"        \"aliment\": {\r",
											"            \"id\": 1,\r",
											"            \"name\": \"Aliment 1\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 100\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T13:37:00\",\r",
											"        \"weight\": 200\r",
											"    },\r",
											"    {\r",
											"        \"id\": 3,\r",
											"        \"aliment\": {\r",
											"            \"id\": 2,\r",
											"            \"name\": \"Aliment 2\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 222\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T15:37:00\",\r",
											"        \"weight\": 110\r",
											"    },\r",
											"    {\r",
											"        \"id\": 4,\r",
											"        \"aliment\": {\r",
											"            \"id\": 2,\r",
											"            \"name\": \"Aliment 2\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 222\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T15:39:00\",\r",
											"        \"weight\": 220\r",
											"    }\r",
											"]\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeGetAllForUserWithIdOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"[\r",
											"    {\r",
											"        \"id\": 1,\r",
											"        \"aliment\": {\r",
											"            \"id\": 1,\r",
											"            \"name\": \"Aliment 1\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 100\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T13:37:00\",\r",
											"        \"weight\": 100\r",
											"    },\r",
											"    {\r",
											"        \"id\": 2,\r",
											"        \"aliment\": {\r",
											"            \"id\": 1,\r",
											"            \"name\": \"Aliment 1\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 100\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T13:37:00\",\r",
											"        \"weight\": 200\r",
											"    },\r",
											"    {\r",
											"        \"id\": 3,\r",
											"        \"aliment\": {\r",
											"            \"id\": 2,\r",
											"            \"name\": \"Aliment 2\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 222\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T15:37:00\",\r",
											"        \"weight\": 110\r",
											"    },\r",
											"    {\r",
											"        \"id\": 4,\r",
											"        \"aliment\": {\r",
											"            \"id\": 2,\r",
											"            \"name\": \"Aliment 2\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 222\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T15:39:00\",\r",
											"        \"weight\": 220\r",
											"    }\r",
											"]\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/?userId=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										""
									],
									"query": [
										{
											"key": "userId",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeCreateOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"id\": 7,\r",
											"    \"aliment\": {\r",
											"        \"id\": 1,\r",
											"        \"name\": \"Aliment 1\",\r",
											"        \"barecode\": null,\r",
											"        \"calories\": 100\r",
											"    },\r",
											"    \"consumeDate\": \"2021-05-09T22:38:40\",\r",
											"    \"weight\": 123\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AlimentId\": 1,\r\n    \"ConsumeDate\": \"2021-05-09T22:38:40\",\r\n    \"Weight\": 123\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/aliment-consumes",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeUpdateOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"id\": 7,\r",
											"    \"aliment\": {\r",
											"        \"id\": 1,\r",
											"        \"name\": \"Aliment 1\",\r",
											"        \"barecode\": null,\r",
											"        \"calories\": 100\r",
											"    },\r",
											"    \"consumeDate\": \"2021-05-09T22:38:40\",\r",
											"    \"weight\": 456\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Weight\": 456\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										"7"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeDeleteOneOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										"7"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Bad",
					"item": [
						{
							"name": "NotLogged",
							"item": [
								{
									"name": "AlimentConsumeCreateBadNotLogged",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AlimentId\": 1,\r\n    \"ConsumeDate\": \"2021-05-09T22:38:40\",\r\n    \"Weight\": 123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/aliment-consumes",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliment-consumes"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentConsumeGetOneBadNotLogged",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:5000/aliment-consumes/2",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliment-consumes",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentConsumeGetAllForUserBadNotLogged",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:5000/aliment-consumes/",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliment-consumes",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentConsumeUpdateBadNotLogged",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Weight\": 456\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/aliment-consumes/7",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliment-consumes",
												"7"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentConsumeDeleteOneBadNotLogged",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:5000/aliment-consumes/5",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliment-consumes",
												"5"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "NotAllowed",
							"item": [
								{
									"name": "AlimentConsumeGetOneBadNotAllowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:5000/aliment-consumes/5",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliment-consumes",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentConsumeGetAllForUserBadNotAllowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:5000/aliment-consumes/?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliment-consumes",
												""
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentConsumeUpdateBadNotAllowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Weight\": 456\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/aliment-consumes/5",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliment-consumes",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentConsumeDeleteOneBadNotAllowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:5000/aliment-consumes/5",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliment-consumes",
												"5"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "AlimentConsumeGetOneBadId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"errors\": {\r",
											"        \"message\": \"Aliment-consume not found\"\r",
											"    }\r",
											"}\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/9",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeCreateBadMissingAlimentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var expectedError =\r",
											"{\r",
											"    \"AlimentId\": [\r",
											"        \"The AlimentId field is required.\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(JSON.stringify(responseJson.errors)).is.to.equal(JSON.stringify(expectedError)); \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ConsumeDate\": \"2021-05-09T22:38:40\",\r\n    \"Weight\": 123\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/aliment-consumes",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeCreateBadMissinWeight",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var expectedError =\r",
											"{\r",
											"    \"Weight\": [\r",
											"        \"The Weight field is required.\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(JSON.stringify(responseJson.errors)).is.to.equal(JSON.stringify(expectedError)); \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AlimentId\": 1,\r\n    \"ConsumeDate\": \"2021-05-09T22:38:40\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/aliment-consumes",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeUpdateBadMissingWeight",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var expectedError =\r",
											"{\r",
											"    \"Weight\": [\r",
											"        \"The Weight field is required.\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(JSON.stringify(responseJson.errors)).is.to.equal(JSON.stringify(expectedError)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										"7"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeUpdateBadNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"errors\": {\r",
											"        \"message\": \"Aliment-consume not found\"\r",
											"    }\r",
											"}\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Weight\": 456\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/777",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										"777"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeDeleteOneBadNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"errors\": {\r",
											"        \"message\": \"Aliment-consume not found\"\r",
											"    }\r",
											"}\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/777",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										"777"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "AlimentConsumeGetOneForAnotherUserByAdminOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"id\": 2,\r",
											"    \"aliment\": {\r",
											"        \"id\": 1,\r",
											"        \"name\": \"Aliment 1\",\r",
											"        \"barecode\": null,\r",
											"        \"calories\": 100\r",
											"    },\r",
											"    \"consumeDate\": \"2021-05-08T13:37:00\",\r",
											"    \"weight\": 200\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeGetOneByAdminOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"id\": 5,\r",
											"    \"aliment\": {\r",
											"        \"id\": 2,\r",
											"        \"name\": \"Aliment 2\",\r",
											"        \"barecode\": null,\r",
											"        \"calories\": 222\r",
											"    },\r",
											"    \"consumeDate\": \"2021-05-08T15:39:00\",\r",
											"    \"weight\": 222\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeGetAllByAdminOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"[\r",
											"    {\r",
											"        \"id\": 5,\r",
											"        \"aliment\": {\r",
											"            \"id\": 2,\r",
											"            \"name\": \"Aliment 2\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 222\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T15:39:00\",\r",
											"        \"weight\": 222\r",
											"    },\r",
											"    {\r",
											"        \"id\": 6,\r",
											"        \"aliment\": {\r",
											"            \"id\": 2,\r",
											"            \"name\": \"Aliment 2\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 222\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T15:39:00\",\r",
											"        \"weight\": 333\r",
											"    }\r",
											"]\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeGetAllForAnotherUserWithIdByAdminOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"[\r",
											"    {\r",
											"        \"id\": 1,\r",
											"        \"aliment\": {\r",
											"            \"id\": 1,\r",
											"            \"name\": \"Aliment 1\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 100\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T13:37:00\",\r",
											"        \"weight\": 100\r",
											"    },\r",
											"    {\r",
											"        \"id\": 2,\r",
											"        \"aliment\": {\r",
											"            \"id\": 1,\r",
											"            \"name\": \"Aliment 1\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 100\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T13:37:00\",\r",
											"        \"weight\": 200\r",
											"    },\r",
											"    {\r",
											"        \"id\": 3,\r",
											"        \"aliment\": {\r",
											"            \"id\": 2,\r",
											"            \"name\": \"Aliment 2\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 222\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T15:37:00\",\r",
											"        \"weight\": 110\r",
											"    },\r",
											"    {\r",
											"        \"id\": 4,\r",
											"        \"aliment\": {\r",
											"            \"id\": 2,\r",
											"            \"name\": \"Aliment 2\",\r",
											"            \"barecode\": null,\r",
											"            \"calories\": 222\r",
											"        },\r",
											"        \"consumeDate\": \"2021-05-08T15:39:00\",\r",
											"        \"weight\": 220\r",
											"    }\r",
											"]\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/?userId=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										""
									],
									"query": [
										{
											"key": "userId",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentConsumeDeleteOneForOtherUserByAdminOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliment-consumes/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliment-consumes",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AdminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Aliments",
			"item": [
				{
					"name": "Bad",
					"item": [
						{
							"name": "NotLogged",
							"item": [
								{
									"name": "AlimentGetAllBadNotLogged",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:5000/aliments",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentGetOneBadNotLogged",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:5000/aliments/4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentGetOneByNameBadNotLogged",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:5000/aliments?name=Aliment 2",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments"
											],
											"query": [
												{
													"key": "name",
													"value": "Aliment 2"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "NotAllowed",
							"item": [
								{
									"name": "AlimentCreateNotAllowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Aliment 8\",\r\n    \"calories\": 456,\r\n    \"barecode\": \"1234567890\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/aliments",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentUpdateNotAllowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Aliment 001\",\r\n    \"calories\": 1234,\r\n    \"barecode\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/aliments/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentDeleteOneBadNotAllowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:5000/aliments/5",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments",
												"5"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "AlimentGetOneBadId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"errors\": {\r",
											"        \"message\": \"Aliment not found\"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliments/777",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliments",
										"777"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentGetOneByNameBadNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"errors\": {\r",
											"        \"message\": \"Aliment not found\"\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliments?name=Troll Aliment",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliments"
									],
									"query": [
										{
											"key": "name",
											"value": "Troll Aliment"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ok",
					"item": [
						{
							"name": "AlimentGetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"[\r",
											"    {\r",
											"        \"id\": 1,\r",
											"        \"name\": \"Aliment 1\",\r",
											"        \"barecode\": null,\r",
											"        \"calories\": 100\r",
											"    },\r",
											"    {\r",
											"        \"id\": 2,\r",
											"        \"name\": \"Aliment 2\",\r",
											"        \"barecode\": null,\r",
											"        \"calories\": 222\r",
											"    },\r",
											"    {\r",
											"        \"id\": 3,\r",
											"        \"name\": \"Aliment 3\",\r",
											"        \"barecode\": null,\r",
											"        \"calories\": 300\r",
											"    },\r",
											"    {\r",
											"        \"id\": 4,\r",
											"        \"name\": \"Aliment 4\",\r",
											"        \"barecode\": \"1234567890123\",\r",
											"        \"calories\": 400\r",
											"    },\r",
											"    {\r",
											"        \"id\": 5,\r",
											"        \"name\": \"Aliment 5\",\r",
											"        \"barecode\": \"1234567890456\",\r",
											"        \"calories\": 555\r",
											"    },\r",
											"    {\r",
											"        \"id\": 6,\r",
											"        \"name\": \"Aliment 6\",\r",
											"        \"barecode\": \"1234567890\",\r",
											"        \"calories\": 600\r",
											"    },\r",
											"    {\r",
											"        \"id\": 7,\r",
											"        \"name\": \"Aliment 7\",\r",
											"        \"barecode\": \"1234567890\",\r",
											"        \"calories\": 777\r",
											"    }\r",
											"]\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliments"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentGetOneOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"id\": 4,\r",
											"    \"name\": \"Aliment 4\",\r",
											"    \"barecode\": \"1234567890123\",\r",
											"    \"calories\": 400\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliments/4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliments",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlimentGetOneByNameOk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var expectedBody =\r",
											"{\r",
											"    \"id\": 2,\r",
											"    \"name\": \"Aliment 2\",\r",
											"    \"barecode\": null,\r",
											"    \"calories\": 222\r",
											"}\r",
											"\r",
											"pm.test(\"Verify return values\", function () { \r",
											"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:5000/aliments?name=Aliment 2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"aliments"
									],
									"query": [
										{
											"key": "name",
											"value": "Aliment 2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "Bad",
							"item": [
								{
									"name": "AlimentCreateBadMissName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"var expectedError =\r",
													"{\r",
													"    \"Name\": [\r",
													"        \"The Name field is required.\"\r",
													"    ]\r",
													"}\r",
													"\r",
													"pm.test(\"Verify return values\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(JSON.stringify(responseJson.errors)).is.to.equal(JSON.stringify(expectedError)); \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"calories\": 456,\r\n    \"barecode\": \"1234567890\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/aliments",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentCreateBadMissCalories",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"var expectedError =\r",
													"{\r",
													"    \"Calories\": [\r",
													"        \"The Calories field is required.\"\r",
													"    ]\r",
													"}\r",
													"\r",
													"pm.test(\"Verify return values\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(JSON.stringify(responseJson.errors)).is.to.equal(JSON.stringify(expectedError)); \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Aliment 8\",\r\n    \"barecode\": \"1234567890\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/aliments",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentUpdateBadId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"var expectedBody =\r",
													"{\r",
													"    \"errors\": {\r",
													"        \"message\": \"Aliment not found\"\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test(\"Verify return values\", function () { \r",
													"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Aliment 001\",\r\n    \"calories\": 1234,\r\n    \"barecode\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/aliments/777",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments",
												"777"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentUpdateBadMissName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"var expectedError =\r",
													"{\r",
													"    \"Name\": [\r",
													"        \"The Name field is required.\"\r",
													"    ]\r",
													"}\r",
													"\r",
													"pm.test(\"Verify return values\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(JSON.stringify(responseJson.errors)).is.to.equal(JSON.stringify(expectedError)); \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"calories\": 1234,\r\n    \"barecode\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/aliments/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentUpdateBadMissCalories",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"var expectedError =\r",
													"{\r",
													"    \"Calories\": [\r",
													"        \"The Calories field is required.\"\r",
													"    ]\r",
													"}\r",
													"\r",
													"pm.test(\"Verify return values\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(JSON.stringify(responseJson.errors)).is.to.equal(JSON.stringify(expectedError)); \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Aliment 001\",\r\n    \"barecode\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/aliments/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentDeleteOneBadId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"var expectedBody =\r",
													"{\r",
													"    \"errors\": {\r",
													"        \"message\": \"Aliment not found\"\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test(\"Verify return values\", function () { \r",
													"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:5000/aliments/777",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments",
												"777"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ok",
							"item": [
								{
									"name": "AlimentCreate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var expectedBody =\r",
													"{\r",
													"    \"id\": 8,\r",
													"    \"name\": \"Aliment 8\",\r",
													"    \"barecode\": \"1234567890\",\r",
													"    \"calories\": 456\r",
													"}\r",
													"\r",
													"pm.test(\"Verify return values\", function () { \r",
													"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Aliment 8\",\r\n    \"calories\": 456,\r\n    \"barecode\": \"1234567890\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/aliments",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentUpdateOk",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var expectedBody =\r",
													"{\r",
													"    \"id\": 1,\r",
													"    \"name\": \"Aliment 001\",\r",
													"    \"barecode\": \"123\",\r",
													"    \"calories\": 1234\r",
													"}\r",
													"\r",
													"pm.test(\"Verify return values\", function () { \r",
													"    pm.expect(JSON.stringify(pm.response.json())).is.to.equal(JSON.stringify(expectedBody)); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Aliment 001\",\r\n    \"calories\": 1234,\r\n    \"barecode\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:5000/aliments/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "AlimentDeleteOneOk",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:5000/aliments/5",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "5000",
											"path": [
												"aliments",
												"5"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AdminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{UserToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}